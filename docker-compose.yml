version: '3.9'

services:
  frontend:
    build:
      context: ./businesssectors.client
      dockerfile: Dockerfile
    ports:
      - "4200:80"  # Map container port 80 to host port 4200
    environment:
      - NODE_ENV=production
      - API_URL=http://businesssectors.server:8080  # Use internal Docker network name
    depends_on:
      - businesssectors.server
    networks:
      - backend
  businesssectors.server:
    image: ${DOCKER_REGISTRY-}businesssectorsserver
    build:
      context: .
      dockerfile: BusinessSectors.Server/Dockerfile
    container_name: business-sectors-app
    volumes:
      - ./config:/app/config:ro
    depends_on:
      - db
    networks:
      - backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SectorsConfigPath=/app/config/sectors-config.json
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ConnectionStrings__sectorsDb=Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "8080:8080"
      # - "8081:8081"

  db:
    image: postgres:16.8
    container_name: db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend

volumes:
  pgdata:

networks:
  backend:
    driver: bridge

